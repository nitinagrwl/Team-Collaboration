{"version":3,"sources":["server/firebase.js","Components/sidebar/UserInfo/UserInfo.component.jsx","store/actioncreater.js","store/actiontypes.js","Components/sidebar/Notification/Notification.component.jsx","Components/sidebar/Channels/Channel.component.jsx","Components/sidebar/PrivateChat/PrivateChat.component.jsx","Components/sidebar/FavoutiteChannel/FavouriteChannel.component.jsx","Components/sidebar/SideBar.component.jsx","Components/Messages/MessageHeader/MessageHeader.component.jsx","Components/Messages/MessageContent/MessageContent.component.jsx","Components/Messages/ImageUpload/ImageUpload.component.jsx","Components/Messages/MessageInput/MessageInput.component.jsx","Components/Messages/Messages.component.jsx","App.js","serviceWorker.js","Components/Auth/Login/LoginComponent.jsx","Components/Auth/Register/RegisterComponent.jsx","store/reducer.js","Components/AppLoader/AppLoader.component.jsx","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signout","auth","signOut","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","setChannel","channel","type","payload","currentChannel","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","agg","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","dispatch","selectChannel","openModalState","setOpenModalState","description","channelAddState","setChannelAddState","isLoadingState","setIsLoadingState","channelState","setChannelState","channelIsRef","userIsRef","closeModal","currentState","updatedState","off","setLastVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","created_by","update","catch","err","InputHandle","event","target","value","Menu","style","marginTop","Item","fontSize","map","active","isFavourite","Modal","open","onClose","Form","Segment","stacked","Input","placeholder","onChange","Actions","Button","loading","usersState","setUsersState","connectedUserState","setConnectedUserState","connectedRef","statusRef","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateChannelId","userId","favouriteChannels","favouriteChannel","displayChannels","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","fluid","starChange","starred","Subheader","uniqueUser","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","basic","e","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialogState","sendMessage","downloadURL","createMessageInfo","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","setFavouriteChannel","removeFavouriteChannel","divRef","useRef","searchTermState","setSearchTermState","scrollIntoView","behavior","filterMessageBySearchTerm","regex","RegExp","acc","match","isStarred","favouriteRef","channelName","Group","messageToDisplay","displayMessage","currentEl","App","columns","width","Boolean","window","location","hostname","Login","email","password","userState","setUserState","errorState","setErrorState","isLoading","setIsLoading","prevState","isFormEmpty","verticalAlign","textAlign","GridColumn","maxWidth","errors","concat","signInWithEmailAndPassword","serverError","error","iconPosition","display","to","Register","userCollectionRef","username","confirmPassword","isSuccess","setIsSuccess","checkPassword","updateUserDetail","createdUser","updateProfile","saveUserInDB","createUserWithEmailAndPassword","success","href","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducer","combineReducers","action","AppLoader","Dimmer","Loader","store","createStore","IndexWithHandler","withRouter","setUser","onAuthStateChanged","history","replace","pathname","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8874076a.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDAHBe_pf6WHmMcmKaq00z408AWP8aDHyk\",\r\n    authDomain: \"slack-react-clone-f49b8.firebaseapp.com\",\r\n    databaseURL: \"https://slack-react-clone-f49b8.firebaseio.com\",\r\n    projectId: \"slack-react-clone-f49b8\",\r\n    storageBucket: \"slack-react-clone-f49b8.appspot.com\",\r\n    messagingSenderId: \"572605543985\",\r\n    appId: \"1:572605543985:web:5d796e8b63707e2ec00710\",\r\n    measurementId: \"G-1T3W0FLDSL\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\n  export default firebase","import React from 'react'\r\nimport { Grid, Icon, Header ,Image, Dropdown} from 'semantic-ui-react'\r\nimport {connect} from \"react-redux\"\r\nimport './UserInfo.css'\r\nimport firebase from '../../../server/firebase'\r\n\r\nconst UserInfo = (props) => {\r\n\r\n    const getDropDownOptions = () => {\r\n        return [{\r\n            key : 'signout',\r\n            text :<span onClick={signout} >Sign Out</span>    \r\n        }]\r\n    }\r\n\r\n    const signout = () => {\r\n        firebase.auth()\r\n        .signOut()\r\n        .then(() => console.log(\"user signed out\"));\r\n    }\r\n\r\n    if(props.user){\r\n        return (\r\n            <Grid>\r\n                <Grid.Column>\r\n                    <Grid.Row className=\"userinfo_grid_row\">\r\n                        <Header inverted as=\"h2\"> \r\n                            <Icon name=\"slack\" />\r\n                            <Header.Content>Slack </Header.Content>\r\n                        </Header>\r\n                        <Header className=\"userinfo_displayname\" inverted as=\"h4\">\r\n                            <Dropdown \r\n                            trigger={\r\n                                <span>\r\n                                    <Image src= {props.user.photoURL} avatar></Image>\r\n                                    {props.user.displayName}\r\n                                </span> \r\n                            }\r\n                            options= {getDropDownOptions()}\r\n                            >\r\n                                {console.log(\"we are ok\")}\r\n                            </Dropdown>\r\n                            \r\n                        </Header>\r\n                    </Grid.Row>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n    return null\r\n    \r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user : state.user.currentUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserInfo)","import {SET_CHANNEL, SET_USER , SET_FAVOURITECHANNEL , REMOVE_FAVOURITECHANNEL } from './actiontypes'\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: SET_USER,\r\n        payload : {\r\n            currentUser : user\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const setChannel = (channel) => {\r\n    return {\r\n        type: SET_CHANNEL,\r\n        payload : {\r\n            currentChannel : channel\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const setFavouriteChannel = (channel) => {\r\n    return {\r\n        type: SET_FAVOURITECHANNEL,\r\n        payload : {\r\n            favouriteChannel : channel\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const removeFavouriteChannel = (channel) => {\r\n    return {\r\n        type: REMOVE_FAVOURITECHANNEL,\r\n        payload : {\r\n            favouriteChannel : channel\r\n        }\r\n    }\r\n\r\n}","export const SET_USER = 'SET_USER'\r\n\r\nexport const SET_CHANNEL = 'SET_CHANNEL'\r\n\r\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\r\n\r\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'\r\n","import React, {useState , useEffect} from 'react'\r\nimport { Label } from 'semantic-ui-react'\r\n\r\nimport firebase from '../../../server/firebase'\r\n\r\nexport const Notification =(props) => {\r\n\r\n    const messagesRef = firebase.database().ref('messages')\r\n    const usersRef = firebase.database().ref('users')\r\n\r\n    const [channelsVisitedState , setChannelsVisitedState] = useState({})\r\n    const [messagesTimeStampState , setMessagesTimeStampState] = useState({})\r\n\r\n    useEffect(() => {\r\n        if(props.user){\r\n            usersRef.child(props.user.uid).child('lastVisited').on('value' , snap => {\r\n                setChannelsVisitedState(snap.val())\r\n            })\r\n\r\n            messagesRef.on('value' , snap=>{\r\n                let messages = snap.val()\r\n                let channelsId = Object.keys(messages)\r\n                let messagesTimeStamp = {}\r\n                channelsId.forEach((channelId) => {\r\n                    let ChannelMessageKeys= Object.keys(messages[channelId])\r\n                    ChannelMessageKeys.reduce((agg , item)=>{\r\n                        messagesTimeStamp[channelId] = [ ...messagesTimeStamp[channelId] || []]\r\n                        messagesTimeStamp[channelId].push(messages[channelId][item].timestamp)\r\n                    })\r\n                })\r\n                setMessagesTimeStampState(messagesTimeStamp)\r\n            })\r\n        }\r\n    },[props.user])\r\n\r\n    const calculateNotificationCount = (channelId) => {\r\n        if(channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId){\r\n            let lastVisited= channelsVisitedState[channelId]\r\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId]\r\n             if(channelMessagesTimeStamp){\r\n                 let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length\r\n             return (notificationCount === 0) ? null : <Label color=\"red\">{notificationCount}</Label>\r\n             }\r\n        }\r\n        return null\r\n    }\r\n\r\n    return <>\r\n            {props.displayName}\r\n            {calculateNotificationCount(props.notificationChannelId)\r\n            }</>\r\n}","import React,{ useState, useEffect } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport './Channel.css'\r\nimport {Icon, Menu, Modal, Form ,Segment, Button} from 'semantic-ui-react'\r\nimport firebase from '../../../server/firebase'\r\nimport { setChannel } from '../../../store/actioncreater'\r\nimport {Notification} from '../Notification/Notification.component'\r\n\r\n\r\nconst Channel = (props) => {\r\n\r\n    const [openModalState, setOpenModalState] = useState(false)\r\n    const [channelAddState , setChannelAddState] = useState({name:'' , description:''})\r\n    const [isLoadingState , setIsLoadingState] = useState(false)\r\n    const [channelState , setChannelState] = useState([])\r\n\r\n    let channelIsRef = firebase.database().ref('channels')\r\n    let userIsRef = firebase.database().ref('users')\r\n\r\n    const openModal = () =>{\r\n        setOpenModalState(true)\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setOpenModalState(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        channelIsRef.on('child_added', (snap)=> {\r\n            setChannelState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                updatedState.push(snap.val())\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        return ()=> channelIsRef.off();\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(channelState.length >0){\r\n            props.selectChannel(channelState[0])\r\n        }\r\n    }, [!props.channel ? channelState : null])\r\n\r\n    const isValidChannel = () => {\r\n        return channelAddState && channelAddState.name && channelAddState.description\r\n    }\r\n\r\n    const displayChannel = () => {\r\n        if(channelState.length > 0)\r\n        {\r\n            return channelState.map((channel) => {\r\n                return <Menu.Item \r\n                key={channel.id}\r\n                name={channel.name}\r\n                onClick={()=> selectChannel(channel)}\r\n                active= {props.channel && channel.id === props.channel.id && !props.channel.isFavourite}\r\n                >\r\n                <Notification user={props.user} channel={props.channel}\r\n                notificationChannelId={channel.id}\r\n                displayName = {channel.name}/>\r\n                </Menu.Item>\r\n            })\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const selectChannel = (channel) => {\r\n        setLastVisited(props.user, props.channel)\r\n        setLastVisited(props.user , channel)\r\n        props.selectChannel(channel)\r\n    }\r\n\r\n    const setLastVisited = (user, channel) => {\r\n        let lastVisited = userIsRef.child(user.uid).child('lastVisited').child(channel.id)\r\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n\r\n    const onSubmit =() => {\r\n        if(!isValidChannel() ){\r\n            return ;\r\n        }\r\n        let key = channelIsRef.push().key \r\n        const channel = {\r\n            id : key,\r\n            name: channelAddState.name ,\r\n            description : channelAddState.description ,\r\n            created_by : {\r\n                name : props.user.displayName ,\r\n                avatar : props.user.photoURL\r\n            }\r\n        }\r\n        setIsLoadingState(true)\r\n        channelIsRef.child(key)\r\n        .update(channel)\r\n        .then(() => {\r\n            setChannelAddState({name:'' , description:''})\r\n            closeModal()\r\n            setIsLoadingState(false)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n\r\n    const InputHandle = (event) => {\r\n        let target = event.target\r\n        setChannelAddState((currentState) => {\r\n            let updatedState = {...currentState}\r\n            updatedState[target.name] = target.value\r\n            return updatedState\r\n        })\r\n    }\r\n\r\n    return <>\r\n        <Menu.Menu style={{marginTop : \"35px\"}}>\r\n            <Menu.Item style={{fontSize:\"17px\"}}>\r\n                <span>\r\n                <Icon name=\"exchange\"/> Channel\r\n                </span>\r\n                ({channelState.length})\r\n            </Menu.Item>\r\n            {displayChannel()}\r\n            <Menu.Item>\r\n                <span  className=\"clickable\" onClick={openModal}>\r\n                    <Icon name=\"add\" /> Add\r\n                </span>\r\n            </Menu.Item>\r\n        </Menu.Menu>\r\n        <Modal open={openModalState} onClose={closeModal}>\r\n            <Modal.Header>\r\n                Create Channel\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Segment stacked>\r\n                        \r\n                        <Form.Input \r\n                            name=\"name\"\r\n                            value={channelAddState.name}\r\n                            type='text'\r\n                            placeholder='Enter Channel Name'\r\n                            onChange={InputHandle}\r\n                        />\r\n                        <Form.Input \r\n                            name='description'\r\n                            value={channelAddState.description}\r\n                            type='text'\r\n                            placeholder='Enter Channel Description'\r\n                            onChange={InputHandle}\r\n                        />\r\n                        \r\n                    </Segment>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button  loading={isLoadingState} onClick={onSubmit}>\r\n                    <Icon name=\"checkmark\"/> Save\r\n                </Button>\r\n                <Button onClick={closeModal}>\r\n                    <Icon name=\"remove\"/> Cancel\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user : state.user.currentUser,\r\n        channel : state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  {\r\n    return {\r\n        selectChannel : (channel) => dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(Channel)","import React,{ useState, useEffect } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Icon, Menu} from 'semantic-ui-react'\r\nimport firebase from '../../../server/firebase'\r\nimport { setChannel } from '../../../store/actioncreater'\r\nimport {Notification} from '../Notification/Notification.component'\r\n\r\nconst PrivateChat = (props) => {\r\n\r\n    const [usersState , setUsersState] = useState([])\r\n    const [connectedUserState , setConnectedUserState] = useState([])\r\n\r\n    let userIsRef = firebase.database().ref('users')\r\n\r\n    const connectedRef = firebase.database().ref('.info/connected')\r\n\r\n    const statusRef = firebase.database().ref('status')\r\n   \r\n    useEffect(() => {\r\n        userIsRef.on('child_added', (snap)=> {\r\n            setUsersState((currentState) => {\r\n                let updatedState = [...currentState]\r\n                let user = snap.val(); \r\n                user.name= user.displayName\r\n                user.id= snap.key \r\n                updatedState.push(user)\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        connectedRef.on(\"value\" , snap => {\r\n            if(props.user && snap.val()){\r\n                const userStatusRef = statusRef.child(props.user.uid)\r\n                userStatusRef.set(true)\r\n                userStatusRef.onDisconnect().remove();\r\n            }\r\n        })\r\n\r\n        return ()=>{ userIsRef.off(); connectedRef.off();}\r\n    },[props.user])\r\n\r\n    useEffect(() => {\r\n        statusRef.on(\"child_added\" , snap => {\r\n            setConnectedUserState((currentState) => {\r\n                let updatedState= [...currentState]\r\n                updatedState.push(snap.key)\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        statusRef.on(\"child_removed\" , snap => {\r\n            setConnectedUserState((currentState) => {\r\n                let updatedState= [...currentState]\r\n                let index= updatedState.indexOf(snap.key)\r\n                updatedState.splice(index,1)\r\n                return updatedState\r\n            })\r\n        })\r\n\r\n        return()=> statusRef.off()\r\n    },[usersState])\r\n    \r\n\r\n    const displayUsers = () => {\r\n        if(usersState.length > 0)\r\n        {\r\n            return usersState.filter((user) => user.id !== props.user.uid ).map((user) => {\r\n                return <Menu.Item \r\n                key={user.id}\r\n                name={user.name}\r\n                onClick={()=> selectUser(user)}\r\n                active= {props.channel && generateChannelId(user.id) === props.channel.id}\r\n                >\r\n                <Icon name=\"circle\" color={`${connectedUserState.indexOf(user.id) !== -1 ? \"green\" : \"red\"} ` } />\r\n                <Notification user={props.user} channel={props.channel}\r\n                notificationChannelId={generateChannelId(user.id)}\r\n                displayName = {user.name}/>\r\n                </Menu.Item>\r\n            })\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const selectUser = (user) => {\r\n        let userTemp = {...user}\r\n        userTemp.id = generateChannelId(user.id)\r\n        setLastVisited(props.user, props.channel)\r\n        setLastVisited(props.user , userTemp)\r\n        props.selectChannel(userTemp)\r\n    }\r\n\r\n    const setLastVisited = (user, channel) => {\r\n        let lastVisited = userIsRef.child(user.uid).child('lastVisited').child(channel.id)\r\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP)\r\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP)\r\n    }\r\n\r\n    const generateChannelId = (userId) => {\r\n        if(props.user.uid < userId){\r\n            return props.user.uid + userId\r\n        }\r\n        return userId + props.user.uid\r\n    } \r\n\r\n    return <Menu.Menu style={{marginTop : \"35px\"}}>\r\n            <Menu.Item style={{fontSize:\"17px\"}}>\r\n                <span>\r\n                <Icon name=\"mail\"/> Chat \r\n                </span>\r\n                { usersState.length === 0 ? \" 0\" : usersState.length-1}\r\n            </Menu.Item>\r\n            {displayUsers()}\r\n        </Menu.Menu>\r\n        \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user : state.user.currentUser,\r\n        channel : state.channel.currentChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  {\r\n    return {\r\n        selectChannel : (channel) => dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(PrivateChat)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Icon, Menu} from 'semantic-ui-react'\r\nimport { setChannel } from '../../../store/actioncreater'\r\n\r\nconst FavouriteChannel = (props) => {\r\n\r\n\r\n    const displayChannels = () => {\r\n        if( Object.keys(props.favouriteChannels).length > 0){\r\n            return Object.keys(props.favouriteChannels).map((channelId) => {\r\n                return <Menu.Item \r\n                key={channelId}\r\n                name={props.favouriteChannels[channelId]}\r\n                onClick={()=> props.selectChannel({id: channelId , name : props.favouriteChannels[channelId] , isFavourite:true})}\r\n                active= {props.channel && channelId === props.channel.id && props.channel.isFavourite}\r\n                >\r\n                {props.favouriteChannels[channelId]}\r\n                </Menu.Item>\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n    return <Menu.Menu >\r\n            <Menu.Item style={{fontSize:\"15px\"}}>\r\n                <span>\r\n                <Icon name=\"star\"/> Favourite Channel  \r\n                </span>\r\n                ({ Object.keys(props.favouriteChannels).length})\r\n            </Menu.Item>\r\n            {displayChannels()}\r\n        </Menu.Menu>\r\n        \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel : state.channel.currentChannel,\r\n        favouriteChannels : state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  {\r\n    return {\r\n        selectChannel : (channel) => dispatch(setChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(FavouriteChannel)","import React from 'react'\r\nimport {Menu} from 'semantic-ui-react'\r\nimport './SideBar.css'\r\nimport UserInfo from './UserInfo/UserInfo.component'\r\nimport Channel from './Channels/Channel.component'\r\nimport PrivateChat from './PrivateChat/PrivateChat.component'\r\nimport FavouriteChannel from './FavoutiteChannel/FavouriteChannel.component'\r\n\r\n\r\nexport const SideBar = () => {\r\n    return (\r\n        <Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\r\n            <UserInfo/>\r\n            <FavouriteChannel/>\r\n            <Channel/>\r\n            <PrivateChat />\r\n        </Menu>\r\n    )\r\n}","import React from 'react'\r\nimport {Segment, Header, Input, Icon} from 'semantic-ui-react'\r\n\r\nconst MessageHeader = (props) =>{\r\n    return <Segment clearing>\r\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\r\n            <span>\r\n                {props.channel}\r\n                <Icon onClick={props.starChange}\r\n                    name={props.starred ? \"star\" :\"star outline\"}\r\n                    color={props.starred ? \"yellow\" : \"black\"} />\r\n            </span>\r\n            <Header.Subheader>{props.uniqueUser} User{props.uniqueUser >= 2 ? \"s\" : \"\"}         </Header.Subheader>\r\n        </Header>\r\n        <Header floated=\"right\">\r\n            <Input\r\n            name=\"search\"\r\n            icon='search'\r\n            placeholder=\"Search Message\"\r\n            size=\"mini\"\r\n            onChange={props.searchTermChange}/>\r\n        </Header>\r\n\r\n    </Segment>\r\n}\r\n\r\nexport default MessageHeader","import React from 'react'\r\nimport {Comment ,Image} from 'semantic-ui-react'\r\nimport TimeAgo from 'javascript-time-ago'\r\nimport en from 'javascript-time-ago/locale/en'\r\nimport './MessageContent.css'\r\n\r\nTimeAgo.locale(en)\r\n\r\nconst timeAgo = new TimeAgo()\r\n\r\nconst MessageContent =(props) =>{\r\n    return <Comment>\r\n        <Comment.Avatar src={props.message.user.avatar}/>\r\n        <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\r\n            <Comment.Author>{props.message.user.name}</Comment.Author>\r\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\r\n            {props.message.image ? <Image onLoad={props.imageLoaded} src={props.message.image}/> :\r\n                <Comment.Text>{props.message.content}</Comment.Text>\r\n            }\r\n        </Comment.Content>\r\n    </Comment>\r\n}\r\n\r\nexport default MessageContent","import React,{ useState } from 'react'\r\nimport {Button, Input, Modal,Icon} from 'semantic-ui-react'\r\nimport mime from 'mime-types'\r\n\r\nconst ImageUpload = (props) => {\r\n\r\n    const [fileState , setFileState] = useState(null)\r\n    const acceptedTypes = [\"image/png\" , \"image/jpeg\"]\r\n\r\n    const onFileAdd = (e) => {\r\n        const file= e.target.files[0]\r\n        if(file){\r\n            setFileState(file)\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if(fileState && acceptedTypes.includes(mime.lookup(fileState.name))){\r\n            props.uploadImage(fileState, mime.lookup(fileState.name))\r\n            props.onClose()\r\n            setFileState(null)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal basic open={props.open} onClose={props.onClose}>\r\n            <Modal.Header>\r\n                Select a File\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Input \r\n                name=\"file\"\r\n                type=\"file\"\r\n                fluid\r\n                onChange={onFileAdd}\r\n                label=\"File Type (png/jpeg)\"\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color=\"green\" onClick={onSubmit}>\r\n                    <Icon name=\"checkmark\"/>Add\r\n                </Button>\r\n                <Button color=\"red\" onClick={props.onClose}>\r\n                    <Icon name=\"remove\"/>Cancel\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ImageUpload","import React,{useState} from 'react'\r\nimport { Segment,Input, Button } from 'semantic-ui-react';\r\nimport firebase from '../../../server/firebase'\r\nimport {connect} from 'react-redux'\r\nimport ImageUpload from '../ImageUpload/ImageUpload.component'\r\nimport uuidv4 from 'uuid/v4'\r\n\r\nconst MessageInput = (props) => {\r\n\r\n    const messageRef = firebase.database().ref('messages')\r\n    const storageRef = firebase.storage().ref()\r\n\r\n    const [messageState , setMessageState] = useState(\"\")\r\n    const [fileDialogState , setFileDialogState] = useState(false)\r\n\r\n\r\n    const createMessageInfo = (downloadURL) => {\r\n        return {\r\n            user : {\r\n                avatar : props.user.photoURL,\r\n                name : props.user.displayName ,\r\n                id : props.user.uid\r\n            },\r\n            content : messageState,\r\n            image : downloadURL || \"\",\r\n            timestamp : firebase.database.ServerValue.TIMESTAMP\r\n        }\r\n    }\r\n\r\n    const sendMessage =(downloadURL) => {\r\n        if(messageState || downloadURL) {\r\n            messageRef.child(props.channel.id)\r\n            .push()\r\n            .set(createMessageInfo(downloadURL))\r\n            .then(() => setMessageState(\"\"))\r\n            .catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    const onMessageChange =(e) => {\r\n        let target = e.target\r\n        setMessageState(target.value)\r\n    }\r\n\r\n    const createActionButtons=() => {\r\n        return <>\r\n            <Button icon=\"send\" onClick={()=> {sendMessage()}}/>\r\n            <Button icon='upload' onClick={() => setFileDialogState(true)}/>\r\n        </>\r\n    }\r\n\r\n    const uploadImage = (file, contentType) => {\r\n        const filePath = `chat/image/${uuidv4()}.jpg`\r\n        storageRef.child(filePath).put(file, {contentType : contentType})\r\n        .then((data) => {\r\n            data.ref.getDownloadURL()\r\n            .then((url) => {\r\n                sendMessage(url)\r\n            })\r\n            .catch((err) => console.log(err))\r\n        })\r\n        .catch((err) => console.log(err))\r\n    }\r\n\r\n    return <Segment>\r\n        <Input\r\n        onChange={onMessageChange}\r\n        fluid={true}\r\n        name=\"input\"\r\n        placeholder=\"Write a Message...\"\r\n        value= {messageState}\r\n        label={createActionButtons()}\r\n        labelPosition=\"right\"\r\n        />\r\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={()=> setFileDialogState(false)}/>\r\n    </Segment>\r\n}\r\n\r\nconst mapStateToProps =(state) => {\r\n    return {\r\n        user : state.user.currentUser,\r\n        channel : state.channel.currentChannel\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageInput)","import React, {useEffect, useState , useRef} from 'react'\r\nimport MessageHeader from './MessageHeader/MessageHeader.component'\r\nimport MessageContent from './MessageContent/MessageContent.component'\r\nimport MessageInput from './MessageInput/MessageInput.component'\r\nimport {setFavouriteChannel , removeFavouriteChannel} from '../../store/actioncreater'\r\nimport firebase from '../../server/firebase'\r\nimport {connect} from 'react-redux'\r\nimport { Segment , Comment} from 'semantic-ui-react'\r\nimport './Message.css'\r\n\r\nconst Messages = (props) => {\r\n\r\n    let messageRef = firebase.database().ref('messages')\r\n\r\n    let usersRef = firebase.database().ref('users')\r\n\r\n    let divRef = useRef()\r\n\r\n\r\n    const [messageState, setMessageState] = useState([])\r\n    const [searchTermState , setSearchTermState] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if(props.channel){\r\n            setMessageState([])\r\n            messageRef.child(props.channel.id).on('child_added' , (snap) => {\r\n                setMessageState((currentState) => {\r\n                    let updatedState= [...currentState]\r\n                    updatedState.push(snap.val())\r\n                    return updatedState\r\n                })\r\n            })\r\n            return () => messageRef.child(props.channel.id).off()\r\n        }\r\n       \r\n    }, [props.channel])\r\n\r\n    useEffect(() => {\r\n        if(props.user){\r\n            usersRef.child(props.user.uid).child('favourite')\r\n            .on('child_added' , (snap) => {\r\n                props.setFavouriteChannel(snap.val())\r\n            })\r\n\r\n            usersRef.child(props.user.uid).child('favourite')\r\n            .on('child_removed' , (snap) => {\r\n                props.removeFavouriteChannel(snap.val())\r\n            })\r\n\r\n            return () => usersRef.child(props.user.uid).child('favourite').off()\r\n        }\r\n       \r\n    }, [props.user])\r\n\r\n    useEffect(() => {\r\n        divRef.scrollIntoView({behavior : 'smooth'})\r\n    }, [messageState])\r\n\r\n    const imageLoaded= () => {\r\n        divRef.scrollIntoView({behavior : 'smooth'})\r\n    }\r\n\r\n    const displayMessage = () => {\r\n        let messageToDisplay = searchTermState ? filterMessageBySearchTerm() : messageState ;\r\n        if(messageToDisplay.length > 0)\r\n        {\r\n            return messageToDisplay.map((message) => {\r\n                return <MessageContent imageLoaded={imageLoaded} ownMessage={message.user.id === props.user.uid} key={message.timestamp} message={message}/>\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const uniqueUsersCount=()=>{\r\n        const uniqueUser = messageState.reduce((acc, message) => {\r\n            if(!acc.includes(message.user.name)){\r\n                acc.push(message.user.name)\r\n            }\r\n            return acc\r\n        },[])\r\n\r\n        return uniqueUser.length\r\n    }\r\n\r\n    const searchTermChange =(e)=>{\r\n        const target = e.target \r\n        setSearchTermState(target.value)\r\n    }\r\n\r\n    const filterMessageBySearchTerm = () => {\r\n        const regex= new RegExp(searchTermState , \"gi\")\r\n        const messages = messageState.reduce((acc, message) => {\r\n            if((message.content && message.content.match(regex)) || message.user.name.match(regex)){\r\n                acc.push(message)\r\n            }\r\n            return acc\r\n        },[]);\r\n        return messages\r\n    }\r\n\r\n    const starChange =() => {\r\n        let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id)\r\n        if(isStarred()){\r\n            favouriteRef.remove()\r\n        }\r\n        else{\r\n            favouriteRef.set({channelId : props.channel.id , channelName : props.channel.name})\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const isStarred =() =>{\r\n        if(props.channel)\r\n        return Object.keys(props.favouriteChannels).includes(props.channel.id)\r\n        return false\r\n    }\r\n\r\n    return <div className=\"message\">\r\n        <MessageHeader starChange={starChange} starred={isStarred()} searchTermChange={searchTermChange} channel={props.channel?.name} uniqueUser={uniqueUsersCount()}/>\r\n        <Segment className=\"messagecontent\">\r\n            <Comment.Group >\r\n                {displayMessage()}\r\n                <div ref={currentEl => divRef = currentEl}></div>\r\n            </Comment.Group>\r\n        </Segment>\r\n        <MessageInput/>\r\n        </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel : state.channel.currentChannel,\r\n        user : state.user.currentUser,\r\n        favouriteChannels : state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return {\r\n        setFavouriteChannel: (channel) => dispatch(setFavouriteChannel(channel)),\r\n        removeFavouriteChannel: (channel) => dispatch(removeFavouriteChannel(channel))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Messages)","import React from 'react';\nimport './App.css';\nimport {SideBar} from './Components/sidebar/SideBar.component'\nimport Messages from './Components/Messages/Messages.component'\nimport { Grid } from 'semantic-ui-react';\n\nfunction App() {\n  return (\n    <Grid columns=\"equal\">\n      <SideBar/>\n        <Grid.Column className=\"messagepanel\">\n          <Messages/>\n        </Grid.Column>\n        <Grid.Column width={1}>\n          <span></span>\n        </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{useState} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Grid , Segment , Form, GridColumn , Header , Icon ,Message} from 'semantic-ui-react'\r\nimport firebase from '../../../server/firebase'\r\n\r\nconst Login = () => {\r\n\r\n    let user = {\r\n        email : '',\r\n        password : '',\r\n    } \r\n    let errors=[];\r\n    \r\n    const [userState , setUserState] = useState(user)\r\n    const [errorState , setErrorState] = useState(errors)\r\n    const [isLoading , setIsLoading] = useState(false)\r\n    \r\n    const InputHandle= (event) => {\r\n        let target = event.target\r\n        setUserState((prevState) => {\r\n            let currentState = {...prevState}\r\n            currentState[target.name] = target.value\r\n            return currentState\r\n        })\r\n    }\r\n    \r\n    const checkForm= () =>{\r\n        if(isFormEmpty()){\r\n            setErrorState((errors)=> errors.concat( {message: 'Please fill the form completely'}))\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    \r\n    const isFormEmpty= () => {\r\n        return !userState.email.length ||\r\n                !userState.password.length\r\n    }\r\n    \r\n    const errorFormat = () => {\r\n        return errorState.map((error , index) => <p key={index}> {error.message}</p>)\r\n    }\r\n    \r\n    const onSubmit = (event) => {\r\n        setErrorState(() => [])\r\n        if(checkForm())\r\n        {\r\n            setIsLoading(true)\r\n                firebase.auth()\r\n                .signInWithEmailAndPassword(userState.email , userState.password)\r\n                    .then(user => {\r\n                        setIsLoading(false)\r\n                    })\r\n                    .catch(serverError => {\r\n                        setIsLoading(false)\r\n                        setErrorState(error => error.concat(serverError))\r\n                    })\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    return (<Grid verticalAlign='middle' textAlign='center' className='grid-form'>\r\n    <GridColumn style={{maxWidth : '500px'}}>\r\n        <Header icon as ='h2'>\r\n            <Icon name='slack' />\r\n                Login\r\n        </Header>\r\n        <Form onSubmit={onSubmit}>\r\n            <Segment stacked>\r\n                \r\n                <Form.Input \r\n                    name=\"email\"\r\n                    value={userState.email}\r\n                    icon='mail'\r\n                    iconPosition='left'\r\n                    type='mail'\r\n                    placeholder='Email'\r\n                    onChange={InputHandle}\r\n                />\r\n                <Form.Input \r\n                    name='password'\r\n                    value={userState.password}\r\n                    icon='lock'\r\n                    iconPosition='left'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={InputHandle}\r\n                />\r\n                \r\n            </Segment>\r\n            <button display={isLoading} loading={isLoading}>Log in</button>\r\n        </Form>\r\n        {errorState.length > 0 && <Message >\r\n            <h3> Error </h3>\r\n            {errorFormat()}\r\n        </Message>\r\n        }\r\n        \r\n        <Message>\r\n            Not an User? <Link to=\"/register\"> Register </Link>\r\n        </Message>\r\n    </GridColumn>\r\n</Grid>)\r\n}\r\n\r\nexport default Login","import React , {useState} from 'react'\r\nimport {Grid , Segment , Form, GridColumn , Header , Icon ,Message} from 'semantic-ui-react'\r\nimport './Register.css'\r\nimport firebase from './../../../server/firebase'\r\n\r\nconst Register = () => {\r\n    let user = {\r\n        username: '',\r\n        email : '',\r\n        password : '',\r\n        confirmPassword : ''\r\n    } \r\n    let errors = [];\r\n    let userCollectionRef = firebase.database().ref('users');\r\n\r\n    const [userState , setUserState] = useState(user);\r\n    const [errorState , setErrorState] = useState(errors)\r\n    const [isLoading , setIsLoading] = useState(false)\r\n    const [isSuccess , setIsSuccess] = useState(false)\r\n\r\n\r\n    const InputHandle= event => {\r\n        let target = event.target\r\n        setUserState((prevState) => {\r\n            let currentState = {...prevState}\r\n            currentState[target.name] = target.value\r\n            return currentState\r\n        })\r\n    }\r\n\r\n    const checkForm = () => {\r\n        if(isFormEmpty()){\r\n            setErrorState((error) =>  error.concat( {message : 'Please fill the form completely'}))\r\n            return false\r\n        }\r\n        if(!checkPassword()){\r\n            \r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const isFormEmpty = () => {\r\n        return !userState.username.length ||\r\n                !userState.email.length ||\r\n                !userState.password.length ||\r\n                !userState.confirmPassword.length \r\n    }\r\n\r\n    const checkPassword= () => {\r\n        if(userState.password.length < 8){\r\n            setErrorState((error) => error.concat( {message : 'Length of should be atleast 8'}))\r\n            return false\r\n        }\r\n        if(userState.password !== userState.confirmPassword){\r\n            setErrorState((error) => error.concat( {message : 'Password and confirm Password do not match'}))\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const errorFormat = () => {\r\n        return errorState.map((error , index) => <p key={index}> {error.message}</p>)\r\n    }\r\n\r\n    const onSubmit = event => {\r\n        setIsSuccess(false)\r\n        setErrorState((error) => [])\r\n        if(checkForm())\r\n        {\r\n            setIsLoading(true)\r\n            firebase.auth()\r\n                .createUserWithEmailAndPassword(userState.email , userState.password)\r\n                .then(createdUser => {\r\n                    setIsLoading(false)\r\n                    updateUserDetail(createdUser)\r\n                })\r\n                .catch(serverError => {\r\n                    setIsLoading(false)\r\n                    setErrorState(error => error.concat(serverError))\r\n                })\r\n        }\r\n    }\r\n\r\n    const updateUserDetail = createdUser => {\r\n        if(createdUser){\r\n            setIsLoading(true)\r\n            createdUser.user\r\n            .updateProfile({\r\n                displayName : userState.username,\r\n                photoURL : `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\r\n            })\r\n            .then(() => {\r\n                setIsLoading(false)\r\n                saveUserInDB(createdUser)\r\n            })\r\n            .catch(error => {\r\n                setIsLoading(false)\r\n                console.log(error)\r\n            })\r\n        }\r\n    }\r\n\r\n    const saveUserInDB = createdUser => {\r\n        setIsLoading(true)\r\n        userCollectionRef.child(createdUser.user.uid).set({\r\n            displayName : createdUser.user.displayName,\r\n            photoURL : createdUser.user.photoURL\r\n        })\r\n        .then(() => {\r\n            setIsLoading(false)\r\n            setIsSuccess(true)\r\n        })\r\n        .catch(serverError => {\r\n            setIsLoading(false)\r\n            setErrorState(error => error.concat(serverError))\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Grid verticalAlign='middle' textAlign='center' className='grid-form'>\r\n            <GridColumn style={{maxWidth : '500px'}}>\r\n                <Header icon as ='h2'>\r\n                    <Icon name='slack' />\r\n                        Register\r\n                </Header>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Segment stacked>\r\n                        <Form.Input \r\n                        name='username'\r\n                        value={userState.username}\r\n                        icon='user'\r\n                        iconPosition='left'\r\n                        type='text'\r\n                        placeholder='Username'\r\n                        onChange={InputHandle}\r\n                        />\r\n                        <Form.Input \r\n                            name=\"email\"\r\n                            value={userState.email}\r\n                            icon='mail'\r\n                            iconPosition='left'\r\n                            type='mail'\r\n                            placeholder='Email'\r\n                            onChange={InputHandle}\r\n                        />\r\n                        <Form.Input \r\n                            name='password'\r\n                            value={userState.password}\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            type='password'\r\n                            placeholder='Password'\r\n                            onChange={InputHandle}\r\n                        />\r\n                        <Form.Input \r\n                            name='confirmPassword'\r\n                            value={userState.confirmPassword}\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            onChange={InputHandle}\r\n                        />\r\n                    </Segment>\r\n                    <button display={isLoading} loading={isLoading}>Submit</button>\r\n                </Form>\r\n                {errorState.length > 0 && <Message >\r\n                    <h3> Error </h3>\r\n                    {errorFormat()}\r\n                </Message>\r\n                }\r\n                {isSuccess && <Message success>\r\n                    <h3> Successfully Registered</h3>\r\n                </Message>                    \r\n                }\r\n                <Message>\r\n                    Already an User? <a href=\"/login\"> Login </a>\r\n                </Message>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Register","import {SET_USER, SET_CHANNEL , SET_FAVOURITECHANNEL , REMOVE_FAVOURITECHANNEL} from './actiontypes'\r\nimport {combineReducers} from 'redux'\r\n\r\nlet defaultUserState = {\r\n    currentUser : null\r\n}\r\nconst userReduser = (state= defaultUserState , action) => {\r\n    if(action.type === SET_USER){\r\n        let payload = action.payload\r\n        state = {...payload}\r\n        return state\r\n    }\r\n    return state\r\n}\r\n\r\nlet defaultChannelState = {\r\n    currentChannel  :null,\r\n    loading: true\r\n}\r\n\r\nconst channelReduser = (state= defaultChannelState , action) => {\r\n    if(action.type === SET_CHANNEL) {\r\n        let payload = action.payload\r\n        state = {...payload}\r\n        state.loading=false\r\n        return state\r\n    }\r\n    return state\r\n}\r\n\r\nlet defaultFavouriteChannelState = {\r\n    favouriteChannel  :{}\r\n}\r\n\r\nconst favouriteChannelReduser = (state= defaultFavouriteChannelState , action) => {\r\n    if(action.type === SET_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel\r\n        let updatedState = {...state.favouriteChannel}\r\n        updatedState[payload.channelId] = payload.channelName\r\n        return {favouriteChannel : updatedState}\r\n    }\r\n    else if(action.type === REMOVE_FAVOURITECHANNEL) {\r\n        let payload = action.payload.favouriteChannel\r\n        let updatedState = {...state.favouriteChannel}\r\n        delete updatedState[payload.channelId] \r\n        return {favouriteChannel : updatedState}\r\n    }\r\n    return state\r\n}\r\n\r\nexport const combinedReducer = combineReducers({user : userReduser , channel : channelReduser , favouriteChannel: favouriteChannelReduser})","import React from 'react'\r\nimport { Dimmer,Loader } from 'semantic-ui-react'\r\nimport './AppLoader.css'\r\n\r\nexport const AppLoader = (props) => {\r\n    return <Dimmer active={props.loading}>\r\n        <Loader size=\"huge\" content=\"Loading...\"/>\r\n    </Dimmer>\r\n}","import React ,{useEffect}from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider , connect} from 'react-redux'\nimport {createStore} from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport Login from './Components/Auth/Login/LoginComponent'\nimport Register from './Components/Auth/Register/RegisterComponent'\nimport firebase from './server/firebase'\nimport {combinedReducer} from './store/reducer'\nimport {setUser} from './store/actioncreater'\nimport {AppLoader} from './Components/AppLoader/AppLoader.component'\n\nimport {BrowserRouter as Router , Switch , Route, withRouter} from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\n\nconst store = createStore(combinedReducer)\nconst Index = (props) =>{\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if(user){\n        props.setUser(user)\n        props.history.push(\"/\")\n      }\n      else{        \n        props.history.replace(\"/login\")\n        props.setUser(null)\n      }\n    })\n  },[])\n\n\n  return (<>\n        <AppLoader loading={props.loading && props.location.pathname === '/'}/>\n        <Switch>\n        <Route path='/login' component={Login}/>\n        <Route path='/register' component={Register} />\n        <Route path='/' component={App}/>\n      </Switch></>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser : state.user.currentUser,\n    loading : state.channel.loading\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser : (user) =>{dispatch(setUser(user))}\n  }\n}\n\nconst IndexWithHandler = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithHandler/>\n      </Router>\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}